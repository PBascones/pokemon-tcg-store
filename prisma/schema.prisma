// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

// Modelo de Expansión
model Expansion {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  releaseDate DateTime?
  products    Product[]
  sets        Set[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modelo de Set (Subcategoría de Expansión)
model Set {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  releaseDate DateTime?
  
  // Relación con Expansión
  expansionId String
  expansion   Expansion @relation(fields: [expansionId], references: [id])
  
  // Relación con Productos
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([expansionId])
}

// Modelo de Producto (Cartas Pokémon)
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  
  // Información específica de la carta
  cardNumber  String?
  rarity      String?  // Ej: "Common", "Rare", "Ultra Rare"
  condition   String?  // Ej: "NM", "LP", "MP"
  language    String   @default("Español") // "Español", "Inglés", "Japonés"
  isGraded    Boolean  @default(false)
  gradeScore  Float?   // Ej: 9.5, 10
  
  // Precio e inventario
  price       Float
  compareAtPrice Float? // Precio anterior para mostrar descuentos
  stock       Int      @default(0)
  
  // Imágenes
  images      ProductImage[]
  
  // Relaciones
  expansionId  String
  expansion    Expansion @relation(fields: [expansionId], references: [id])
  
  setId       String?
  set         Set?      @relation(fields: [setId], references: [id])
  
  orderItems  OrderItem[]
  
  // SEO y visibilidad
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([expansionId])
  @@index([setId])
  @@index([slug])
  @@index([featured])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  order     Int     @default(0)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

// Modelo de Orden
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  
  // Cliente
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  // Información de contacto y envío
  email           String
  phone           String?
  
  shippingName    String
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  
  // Totales
  subtotal        Float
  shipping        Float       @default(0)
  tax             Float       @default(0)
  total           Float
  
  // Estado y pago
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?     // "MercadoPago", "Transferencia"
  
  // MercadoPago
  mercadoPagoId   String?     @unique
  mercadoPagoStatus String?
  
  // Items
  items           OrderItem[]
  
  // Facturación
  invoiceNumber   String?     @unique
  invoiceUrl      String?
  
  notes           String?     @db.Text
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

model OrderItem {
  id          String  @id @default(cuid())
  
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  // Snapshot de la información del producto al momento de la compra
  name        String
  price       Float
  quantity    Int
  
  createdAt   DateTime @default(now())
  
  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING       // Pendiente de pago
  PROCESSING    // Pago confirmado, preparando envío
  SHIPPED       // Enviado
  DELIVERED     // Entregado
  CANCELLED     // Cancelado
}

enum PaymentStatus {
  PENDING       // Pendiente
  PAID          // Pagado
  FAILED        // Fallido
  REFUNDED      // Reembolsado
}

// Modelo para imágenes del carrousel hero
model HeroImage {
  id             String   @id @default(cuid())
  title          String
  subtitle       String?
  imageUrl       String
  mobileImageUrl String
  buttonText     String?
  buttonLink     String?
  order          Int      @default(0)
  isActive       Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([order])
  @@index([isActive])
}